module Sixten.Builtin exposing (Type, Int, addInt, subInt, printInt)

Type : Type

Int : Type

fail : (A : Type) -> A

data Equals forall (A : Type). (a b : A) where
  Refl : Equals a b

data Unit = Unit

printInt : Int -> Unit
addInt : Int -> Int -> Int
mulInt : Int -> Int -> Int
subInt : Int -> Int -> Int

EmptyRepresentation : Type
WordRepresentation : Type

maxRepresentation : Type -> Type -> Type
addRepresentation : Type -> Type -> Type

