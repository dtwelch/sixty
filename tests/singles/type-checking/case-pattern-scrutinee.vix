data Tuple a b where
  MkTuple : a -> b -> Tuple a b

data Nat where
  Z : Nat
  S : Nat -> Nat

data Vector n a where
  Nil : Vector Z a
  Cons : forall m. a -> Vector m a -> Vector (S m) a

zipWithCase : forall a b c n. (a -> b -> c) -> Vector n a -> Vector n b -> Vector n c
zipWithCase f as bs =
  case MkTuple as bs of
    MkTuple (Cons a as') (Cons b bs') -> Cons (f a b) (zipWithCase f as' bs')
    MkTuple Nil Nil -> Nil

zipWithTuple : forall a b c n. (a -> b -> c) -> Tuple (Vector n a) (Vector n b) -> Vector n c
zipWithTuple f (MkTuple Nil Nil) = Nil
zipWithTuple f (MkTuple (Cons a as') (Cons b bs')) = Cons (f a b) (zipWithTuple f (MkTuple as' bs'))

data List a = Nil | Cons a (List a)

zipWithListCase : forall a b c. (a -> b -> c) -> List a -> List b -> List c
zipWithListCase f as bs =
  case MkTuple as bs of
    MkTuple (Cons a as') (Cons b bs') -> case as of
      Cons _ _ -> Cons (f a b) (zipWithListCase f as' bs')
      -- as is a Cons cell, so no Nil case
    MkTuple _ _ -> Nil
